drop database if exists db_entry_index;
CREATE SCHEMA db_entry_index;

CREATE TABLE db_entry_index.CARGO (
  CARGO VARCHAR(20) NOT NULL COMMENT 'LOS CARGOS QUE EXISTEN DENTRO DE UNA INSTITUCION',
  DESCRIPCION VARCHAR(45) NOT NULL COMMENT 'DESCRIPCIÓN DEL CARGO DENTRO DE LA INSTITUCIÓN ',
  ESTADO TINYINT(1) NOT NULL COMMENT 'SI SE ENCUENTRA ACTIVO EL CARGO DENTRO DE LA INSTITUCIÓN ',
  MOTIVO_VISITA_REQUERIDO TINYINT(1) NOT NULL COMMENT 'SI AL USAR EL CARGO ES REQUERIDO QUE SE INGRESE UN MOTIVO PARA EL INGRESO',
  PRIMARY KEY (CARGO)
);

CREATE TABLE db_entry_index.TIPO_DOCUMENTO (
  TIPO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'INDICATIVO DEL TIPO DE DOCUMENTO',
  DESCRIPCION VARCHAR(70) NOT NULL COMMENT 'DESCRIPCIÓN DEL TIPO DE DOCUMENTO ',
  ESTADO TINYINT(1) NOT NULL COMMENT ' SI SE ENCUENTRA ACTIVO EL TIPO DE DOCUMENTO ACTIVO ',
  PRIMARY KEY (TIPO_DOCUMENTO)
);

CREATE TABLE db_entry_index.CUENTA (
  NUMERO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL NUMERO DEL DOCUMENTO DEL USUARIO',
  TIPO_DOCUMENTO_TIPO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL TIPO DEL DOCUMENTO DEL USUARIO',
  FOTO longblob NULL DEFAULT NULL COMMENT 'LA FOTO DEL USAURIO',
  PRIMER_NOMBRE VARCHAR(45) NOT NULL COMMENT 'EL PRIMER NOMBRE DEL USUARIO',
  SEGUNDO_NOMBRE VARCHAR(45) NULL COMMENT 'SEGUNDO NOMBRE DEL USUARIO Y PUEDE SER OPCIONAL',
  PRIMER_APELLIDO VARCHAR(45) NOT NULL COMMENT 'PRIMER APELLIDO DEL USUARIO',
  SEGUNDO_APELLIDO VARCHAR(45) NULL COMMENT 'SEGUNDO APELLIDO DEL USAURIO ES OPCIONAL',
   CARGO_CARGO VARCHAR(20) NOT NULL COMMENT 'EL ROL QUE CUMPLE EN LA ENTIDAD VISITANTE, APRENDIZ, FUNCIONARIO, INSTRUCTOR, ETC...',
  FECHA_FINALIZACION DATE NULL COMMENT 'LA FECHA DE TERMINACION DE LA FORMACION EN EL SENA',
  ESTADO TINYINT(1) NOT NULL COMMENT 'EL ESTADO DE UNA CUENTA, YA QUE SE PUEDEN DESHABILITAR CLIENTES',
  PRIMARY KEY (NUMERO_DOCUMENTO, TIPO_DOCUMENTO_TIPO_DOCUMENTO)  COMMENT 'LLAVE COMPUESTA ENTRE LOS DOS CAMPOS',
  CONSTRAINT FK_CUENTA_CARGO FOREIGN KEY (CARGO_CARGO) REFERENCES db_entry_index.CARGO (CARGO)
    ON UPDATE CASCADE,
  CONSTRAINT FK_CUENTA_TIPO_DOCUMENTO FOREIGN KEY (TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    REFERENCES db_entry_index.TIPO_DOCUMENTO (TIPO_DOCUMENTO)
    ON UPDATE CASCADE
);

CREATE TABLE db_entry_index.EQUIPO (
  ID_EQUIPO VARCHAR(45) NOT NULL COMMENT 'EL ID DEL EQUIPO O SERIAL DEL EQUIPO',
  DESCRIPCION VARCHAR(200) NOT NULL COMMENT 'LA DESCRIPCION DEL EQUIPO',
  ESTADO TINYINT(1) NOT NULL COMMENT 'EL ESTADO DEL EQUIPO SI SE ENCUENTRA ACTIVO O INACTIVO EN EL APLICATIVO ',
  PRIMARY KEY (ID_EQUIPO)  COMMENT 'LLAVE PRIMARIA PARA QUE NO HAYA UN EQUIPO REPETIDO'
);



CREATE TABLE db_entry_index.REGISTRO (
  NUMERO_REGISTRO INT(11) NOT NULL AUTO_INCREMENT COMMENT 'EL NUMERO DEL REGISTRO EL CUAL SE HAGA EN EL SISTEMA Y VA AUTOINCREMNTAL',
  FECHA_ENTRADA DATETIME NOT NULL COMMENT 'LA FECHA DE ENTRADA DE UN USAURIO',
  FECHA_SALIDA DATETIME NULL  COMMENT 'FECHA DE SALIDA DE UN USUARIO',
   CUENTA_NUMERO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL NUMERO DEL DOCUMENTO DE LA CUENTA',
  CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL TIPO DEL DOCUMENTO DE LA CUENTA',
  VISITA VARCHAR(200) NULL COMMENT 'LA RAZON POR LA QUE ENTRA A LA SEDE Y A QUIEN VA ES OPCIONA SOLO PARA VISITANTES',
  ROLL_VISITA VARCHAR(20) NULL  COMMENT 'SE DEBE POR SI EL USUARIO INGRESA COMO VISITANTE',
  PRIMARY KEY (NUMERO_REGISTRO) COMMENT 'EL NUMERO COMO LLAVE PRIMARIA PARA QUE NO SE PUEDA REPETIR',
  CONSTRAINT FK_REGISTRO_CUENTA 
  FOREIGN KEY (CUENTA_NUMERO_DOCUMENTO , CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    REFERENCES db_entry_index.CUENTA (NUMERO_DOCUMENTO , TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    ON UPDATE CASCADE
);

CREATE TABLE db_entry_index.ROLL (
  ROLL VARCHAR(45) NOT NULL COMMENT 'EL PAPEL QUE DESEPEÑARA UN USUARIO DENTRO DE SISTEMA(MODERADOR, ADMINISTRADOR ETC...)',
  DESCRIPCION VARCHAR(70) NOT NULL COMMENT 'DESCRIPCIÓN DEL ROLL DE UN USUARIO DENTRO DEL APLICATICVO',
  ESTADO TINYINT(1) NOT NULL COMMENT ' SI SE ENCUENTRA ACTIVO EL ROLL DENTRO DEL APLICATIVO',
  PRIMARY KEY (ROLL)
);

CREATE TABLE db_entry_index.USUARIO(
  CORREO_ELECTRONICO VARCHAR(100) NOT NULL COMMENT 'EL LOGIN DE UN USUARIO EL CUAL VA A TENER ACCESO AL SISTEMA',
  CONTRASENA VARCHAR(64) character set utf8 NOT NULL COMMENT 'LA CONTRASEÑA DEL USUARIO PARA ENTRA AL SISTEMA',
  ROLL_ROLL VARCHAR(45) NOT NULL COMMENT 'EL PAPEL QUE DESEPEÑARA UN USUARIO DENTRO DE SISTEMA(MODERADOR, ADMINISTRADOR ETC...)',
  CUENTA_NUMERO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL NUMERO DEL DOCUMENTO DE LA CUENTA',
  CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL TIPO DEL DOCUMENTO DE LA CUENTA',
  ESTADO TINYINT(1) NOT NULL COMMENT 'EL ESTADO DE UNA CUENTA ADMINISTRADORA, YA QUE SE PUEDEN DESHABILITAR ADMINISTRADORES',
  
  PRIMARY KEY (CORREO_ELECTRONICO) ,
  CONSTRAINT fk_USUARIO_CUENTA FOREIGN KEY (CUENTA_NUMERO_DOCUMENTO , CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    REFERENCES db_entry_index.CUENTA (NUMERO_DOCUMENTO , TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    ON UPDATE CASCADE,
  CONSTRAINT fk_USUARIO_ROLL FOREIGN KEY (ROLL_ROLL)
    REFERENCES db_entry_index.ROLL (ROLL)
    ON UPDATE CASCADE
);

CREATE TABLE db_entry_index.PROPIETARIO (
  EQUIPO_ID_EQUIPO VARCHAR(45) NOT NULL COMMENT 'EL ID DEL EQUIPO DE REGISTRO DEL EQUIPO',
  CUENTA_NUMERO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL NUMERO DEL DOCUMENTO DE LA CUENTA',
  CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO VARCHAR(12) NOT NULL COMMENT 'EL TIPO DEL DOCUMENTO DE LA CUENTA',
  PRIMARY KEY (EQUIPO_ID_EQUIPO, CUENTA_NUMERO_DOCUMENTO, CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO),
  CONSTRAINT FK_PROPIETARIO_EQUIPO FOREIGN KEY (EQUIPO_ID_EQUIPO)
    REFERENCES db_entry_index.EQUIPO (ID_EQUIPO)
    ON UPDATE CASCADE,
  CONSTRAINT FK_PROPIETARIO_CUENTA FOREIGN KEY (CUENTA_NUMERO_DOCUMENTO , CUENTA_TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    REFERENCES db_entry_index.CUENTA (NUMERO_DOCUMENTO , TIPO_DOCUMENTO_TIPO_DOCUMENTO)
    ON UPDATE CASCADE
);


CREATE TABLE db_entry_index.REGISTRO_EQUIPO (
  REGISTRO_NUMERO_REGISTRO_ENTRADA INT(11) NOT NULL COMMENT 'EL NUMERO DEL REGISTRO DEL EQUIPO ES EL MISMO QUE LA DEL REGISTRO DEL USUARIO EL CUAL SE ASIGNA EN LA ENTRADA',
  REGISTRO_NUMERO_REGISTRO_SALIDA INT(11)COMMENT 'EL NUMERO DEL REGISTRO DEL EQUIPO ES EL MISMO QUE LA DEL REGISTRO DEL USUARIO EL CUAL SE ASIGNA EN LA sALIDA',
  EQUIPO_ID_EQUIPO VARCHAR(45) NOT NULL COMMENT 'EL ID DEL EQUIPO',
  PRIMARY KEY (REGISTRO_NUMERO_REGISTRO_ENTRADA, EQUIPO_ID_EQUIPO),
  CONSTRAINT FK_REGISTRO_EQUIPO_REGISTRO_ENTRADA FOREIGN KEY (REGISTRO_NUMERO_REGISTRO_ENTRADA)
    REFERENCES db_entry_index.REGISTRO (NUMERO_REGISTRO)
    ON UPDATE CASCADE,
  CONSTRAINT FK_REGISTRO_EQUIPO_REGISTRO_SALIDA FOREIGN KEY (REGISTRO_NUMERO_REGISTRO_SALIDA)
    REFERENCES db_entry_index.REGISTRO (NUMERO_REGISTRO)
    ON UPDATE CASCADE,
  CONSTRAINT FK_REGISTRO_EQUIPO_EQUIPO
    FOREIGN KEY (EQUIPO_ID_EQUIPO) REFERENCES db_entry_index.EQUIPO (ID_EQUIPO)
    ON UPDATE CASCADE
);



CREATE TABLE db_entry_index.LOG_ERROR (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'El  consecutivo del log',
  NIVEL VARCHAR(15) COMMENT 'El nivel del evento de log',
  LOG_NAME VARCHAR(256) COMMENT 'El paquete y clase del evento log',
  MENSAJE VARCHAR(1000) COMMENT 'El mensaje del evento log',
  USUARIO VARCHAR(100) COMMENT 'El usuario que ocasiono el evento log',
  FECHA DATETIME COMMENT 'la fecha y hora del evento log',
  PRIMARY KEY (ID)
  );

CREATE TABLE db_entry_index.LOG_AUDITORIA (
  ID BIGINT(20) NOT NULL AUTO_INCREMENT COMMENT 'El  consecutivo del log',
  NIVEL VARCHAR(15) COMMENT 'El nivel del evento de log',
  LOG_NAME VARCHAR(256) COMMENT 'El paquete y clase del evento log',
  MENSAJE VARCHAR(1000) COMMENT 'El mensaje del evento log',
  USUARIO VARCHAR(100) COMMENT 'El usuario que ocasiono el evento log',
  FECHA DATETIME COMMENT 'la fecha y hora del evento log',
  PRIMARY KEY (ID)
  );


